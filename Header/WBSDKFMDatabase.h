/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "living-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSMutableSet, NSMutableDictionary;

@interface WBSDKFMDatabase : XXUnknownSuperclass {
	sqlite3* _db;
	NSString* _databasePath;
	BOOL _logsErrors;
	BOOL _crashOnErrors;
	BOOL _traceExecution;
	BOOL _checkedOut;
	BOOL _shouldCacheStatements;
	BOOL _isExecutingStatement;
	BOOL _inTransaction;
	int _busyRetryTimeout;
	NSMutableDictionary* _cachedStatements;
	NSMutableSet* _openResultSets;
	NSMutableSet* _openFunctions;
}
@property(retain) NSMutableDictionary* cachedStatements;	// G=0xd31415; S=0xd31429; 
@property(assign) BOOL logsErrors;	// G=0xd31439; S=0xd3144d; 
@property(assign) BOOL crashOnErrors;	// G=0xd3145d; S=0xd31471; 
@property(assign) int busyRetryTimeout;	// G=0xd31481; S=0xd31491; 
@property(assign) BOOL checkedOut;	// G=0xd314a1; S=0xd314b5; 
@property(assign) BOOL traceExecution;	// G=0xd314c5; S=0xd314d9; 
+(BOOL)isSQLiteThreadSafe;	// 0xd2ed81
+(id)sqliteLibVersion;	// 0xd2ed4d
+(id)databaseWithPath:(id)path;	// 0xd2ed11
-(void)makeFunctionNamed:(id)named maximumArguments:(int)arguments withBlock:(id)block;	// 0xd3134d
-(void)setShouldCacheStatements:(BOOL)cacheStatements;	// 0xd312ad
-(BOOL)shouldCacheStatements;	// 0xd3129d
-(id)inSavePoint:(id)savePoint;	// 0xd311fd
-(BOOL)rollbackToSavePointWithName:(id)name error:(id*)error;	// 0xd310f9
-(BOOL)releaseSavePointWithName:(id)name error:(id*)error;	// 0xd30ff5
-(BOOL)startSavePointWithName:(id)name error:(id*)error;	// 0xd30eed
-(BOOL)inTransaction;	// 0xd30edd
-(BOOL)beginTransaction;	// 0xd30ea1
-(BOOL)beginDeferredTransaction;	// 0xd30e65
-(BOOL)commit;	// 0xd30e29
-(BOOL)rollback;	// 0xd30ded
-(BOOL)update:(id)update withErrorAndBindings:(id*)errorAndBindings;	// 0xd30db9
-(BOOL)executeUpdateWithFormat:(id)format;	// 0xd30d11
-(BOOL)executeUpdate:(id)update withParameterDictionary:(id)parameterDictionary;	// 0xd30ce5
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;	// 0xd30cbd
-(BOOL)executeUpdate:(id)update;	// 0xd30c85
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;	// 0xd304fd
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;	// 0xd304d5
-(id)executeQueryWithFormat:(id)format;	// 0xd3042d
-(id)executeQuery:(id)query;	// 0xd303f9
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;	// 0xd2fdf1
-(id)executeQuery:(id)query withParameterDictionary:(id)parameterDictionary;	// 0xd2fdcd
-(void)extractSQL:(id)sql argumentsList:(void*)list intoString:(id)string arguments:(id)arguments;	// 0xd2f9bd
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;	// 0xd2f6f1
-(int)changes;	// 0xd2f6a5
-(long long)lastInsertRowId;	// 0xd2f659
-(id)lastError;	// 0xd2f629
-(id)errorWithMessage:(id)message;	// 0xd2f5b1
-(int)lastErrorCode;	// 0xd2f59d
-(BOOL)hadError;	// 0xd2f575
-(id)lastErrorMessage;	// 0xd2f539
-(BOOL)databaseExists;	// 0xd2f4f1
-(void)warnInUse;	// 0xd2f4c1
-(BOOL)goodConnection;	// 0xd2f479
-(BOOL)setKey:(id)key;	// 0xd2f475
-(BOOL)rekey:(id)rekey;	// 0xd2f471
-(void)setCachedStatement:(id)statement forQuery:(id)query;	// 0xd2f405
-(id)cachedStatementForQuery:(id)query;	// 0xd2f3e5
-(void)resultSetDidClose:(id)resultSet;	// 0xd2f39d
-(void)closeOpenResultSets;	// 0xd2f265
-(BOOL)hasOpenResultSets;	// 0xd2f239
-(void)clearCachedStatements;	// 0xd2f145
-(BOOL)close;	// 0xd2f049
-(BOOL)openWithFlags:(int)flags;	// 0xd2efe1
-(BOOL)open;	// 0xd2ef79
-(sqlite3*)sqliteHandle;	// 0xd2ef69
-(id)databasePath;	// 0xd2ef59
-(void)dealloc;	// 0xd2eebd
-(void)finalize;	// 0xd2ee7d
-(id)initWithPath:(id)path;	// 0xd2ed8d
-(BOOL)validateSQL:(id)sql error:(id*)error;	// 0xd49b9d
-(BOOL)columnExists:(id)exists columnName:(id)name;	// 0xd49add
-(id)getTableSchema:(id)schema;	// 0xd49a99
-(id)getSchema;	// 0xd49a79
-(BOOL)tableExists:(id)exists;	// 0xd49a15
-(id)stringDictForQuery:(id)query;	// 0xd49981
-(id)stringDictForQuery:(id)query withArgumentsInArray:(id)array;	// 0xd49911
-(id)dateForQuery:(id)query;	// 0xd49879
-(id)dataForQuery:(id)query;	// 0xd497e1
-(double)doubleForQuery:(id)query;	// 0xd49749
-(BOOL)boolForQuery:(id)query;	// 0xd496b1
-(long)longForQuery:(id)query;	// 0xd49619
-(int)intForQuery:(id)query;	// 0xd49581
-(id)stringForQuery:(id)query;	// 0xd494e9
@end

