/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "NSCopying.h"
#import "NSURLConnectionDelegate.h"
#import "NSURLConnectionDataDelegate.h"
#import "NSCoding.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "living-Structs.h"

@class NSURLResponse, NSInputStream, NSDictionary, NSURLCredential, NSURLConnection, NSRecursiveLock, NSString, NSData, NSOutputStream, NSError, NSSet, NSURLRequest;

@interface APURLConnectionOperation : XXUnknownSuperclass <NSURLConnectionDelegate, NSURLConnectionDataDelegate, NSCoding, NSCopying> {
	BOOL _cancelled;
	BOOL _allowsInvalidSSLCertificate;
	BOOL _shouldUseCredentialStorage;
	short _state;
	NSURLConnection* _connection;
	NSSet* _runLoopModes;
	NSURLRequest* _request;
	NSURLResponse* _response;
	NSError* _error;
	NSData* _responseData;
	NSString* _responseString;
	unsigned _responseStringEncoding;
	NSOutputStream* _outputStream;
	NSURLCredential* _credential;
	int _SSLPinningMode;
	NSDictionary* _userInfo;
	unsigned _backgroundTaskIdentifier;
	id _uploadProgress;
	id _downloadProgress;
	id _authenticationChallenge;
	id _cacheResponse;
	id _redirectResponse;
	NSRecursiveLock* _lock;
	long long _totalBytesRead;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;	// G=0xcd9265; 
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id redirectResponse;	// G=0xcdc53d; S=0xcdc551; 
@property(copy, nonatomic) id cacheResponse;	// G=0xcdc519; S=0xcdc52d; 
@property(copy, nonatomic) id authenticationChallenge;	// G=0xcdc4f5; S=0xcdc509; 
@property(copy, nonatomic) id downloadProgress;	// G=0xcdc4d1; S=0xcdc4e5; 
@property(copy, nonatomic) id uploadProgress;	// G=0xcdc4ad; S=0xcdc4c1; 
@property(assign, nonatomic) unsigned backgroundTaskIdentifier;	// G=0xcdc48d; S=0xcdc49d; 
@property(assign, nonatomic) long long totalBytesRead;	// G=0xcdc3b1; S=0xcdc3c9; 
@property(retain, nonatomic) NSURLConnection* connection;	// G=0xcdc221; S=0xcdc231; 
@property(retain, nonatomic) NSRecursiveLock* lock;	// G=0xcdc561; S=0xcdc571; 
@property(assign, nonatomic, getter=isCancelled) BOOL cancelled;	// G=0xcdc201; S=0xcdc211; 
@property(assign, nonatomic) short state;	// G=0xcdc1f1; S=0xcd9b31; 
@property(retain, nonatomic) NSDictionary* userInfo;	// G=0xcdc455; S=0xcdc465; 
@property(retain, nonatomic) NSOutputStream* outputStream;	// G=0xcd96e9; S=0xcd9749; 
@property(retain, nonatomic) NSInputStream* inputStream;	// G=0xcd95e9; S=0xcd9631; 
@property(assign, nonatomic) int SSLPinningMode;	// G=0xcdc415; S=0xcdc425; 
@property(retain, nonatomic) NSURLCredential* credential;	// G=0xcdc3dd; S=0xcdc3ed; 
@property(assign, nonatomic) BOOL shouldUseCredentialStorage;	// G=0xcdc435; S=0xcdc445; 
@property(assign, nonatomic) unsigned responseStringEncoding;	// G=0xcd9e51; S=0xcdc3a1; 
@property(copy, nonatomic) NSString* responseString;	// G=0xcd9d0d; S=0xcdc391; 
@property(retain, nonatomic) NSData* responseData;	// G=0xcdc359; S=0xcdc369; 
@property(assign, nonatomic) BOOL allowsInvalidSSLCertificate;	// G=0xcdc339; S=0xcdc349; 
@property(retain, nonatomic) NSError* error;	// G=0xcdc301; S=0xcdc311; 
@property(retain, nonatomic) NSURLResponse* response;	// G=0xcdc2c9; S=0xcdc2d9; 
@property(retain, nonatomic) NSURLRequest* request;	// G=0xcdc291; S=0xcdc2a1; 
@property(retain, nonatomic) NSSet* runLoopModes;	// G=0xcdc259; S=0xcdc269; 
+(id)pinnedPublicKeys;	// 0xcd8df1
+(id)pinnedCertificates;	// 0xcd8bd5
+(id)networkRequestThread;	// 0xcd8ae1
+(void)networkRequestThreadEntryPoint:(id)point;	// 0xcd89e9
-(void).cxx_destruct;	// 0xcdc599
-(id)copyWithZone:(NSZone*)zone;	// 0xcdc05d
-(void)encodeWithCoder:(id)coder;	// 0xcdbe19
-(id)initWithCoder:(id)coder;	// 0xcdbc11
-(id)connection:(id)connection willCacheResponse:(id)response;	// 0xcdbb6d
-(void)connection:(id)connection didFailWithError:(id)error;	// 0xcdbaf5
-(void)connectionDidFinishLoading:(id)connection;	// 0xcdba2d
-(void)connection:(id)connection didReceiveData:(id)data;	// 0xcdb831
-(void)connection:(id)connection didReceiveResponse:(id)response;	// 0xcdb7e1
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;	// 0xcdb6f9
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;	// 0xcdb661
-(id)connection:(id)connection needNewBodyStream:(id)stream;	// 0xcdb5b1
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;	// 0xcdb5a1
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;	// 0xcdad15
-(void)cancelConnection;	// 0xcdab4d
-(void)cancel;	// 0xcda9b5
-(void)finish;	// 0xcda8dd
-(void)operationDidStart;	// 0xcda46d
-(void)start;	// 0xcda33d
-(BOOL)isConcurrent;	// 0xcda339
-(BOOL)isFinished;	// 0xcda319
-(BOOL)isExecuting;	// 0xcda2f9
-(BOOL)isReady;	// 0xcda2a5
-(void)resume;	// 0xcda209
-(BOOL)isPaused;	// 0xcda1e5
-(void)pause;	// 0xcd9f85
-(void)setRedirectResponseBlock:(id)block;	// 0xcd9b21
-(void)setCacheResponseBlock:(id)block;	// 0xcd9b11
-(void)setWillSendRequestForAuthenticationChallengeBlock:(id)sendRequestForAuthenticationChallengeBlock;	// 0xcd9b01
-(void)setDownloadProgressBlock:(id)block;	// 0xcd9af1
-(void)setUploadProgressBlock:(id)block;	// 0xcd9ae1
-(void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)executeAsBackgroundTaskWithExpirationHandler;	// 0xcd982d
-(void)setCompletionBlock:(id)block;	// 0xcd93bd
-(void)dealloc;	// 0xcd91ad
-(id)initWithRequest:(id)request;	// 0xcd9051
@end

